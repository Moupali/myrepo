public JsonObject importLeadNew(MultipartFile multipartFile) {
		JsonObject result = null;
		Workbook workbook;
		Lead lead;
		JsonArray leadResult = new 	JsonArray();
//		Database db = client.database("lead", false);

		CountryMapUtil codeObj = new CountryMapUtil();
		
//		Database db = client.database("lead", false);
		
		try { 
			workbook = new XSSFWorkbook(multipartFile.getInputStream());
			Sheet sheet = workbook.getSheetAt(0);
			Iterator<Row> rowIterator = sheet.iterator();
			String status1 = "";
			int i=0;
			while (rowIterator.hasNext())
			{  
				lead = new Lead();
				Row row = rowIterator.next();
//				
//			      if (row.getRowNum() == 3) {
//					break;
//				      }
				if (row.getRowNum() == 0) {
				}else {
					Iterator<Cell> cellIterator = row.cellIterator();
					String lead1="";
					
					while (cellIterator.hasNext()) {
						Cell cell = cellIterator.next();
                         
						int columnindex = cell.getColumnIndex();
										
						if (columnindex == 1) {
							
//							lead1= cell.getStringCellValue();
//							String lead1 = "";
							String country_code= cell.getStringCellValue().trim();
							lead.setCountry(country_code);
							System.out.println("country_code::"+country_code);
							String updatedCounterValue = leadUtility.getLeadCounter(country_code);
							logger.info("updatedCounterValue   ::::"+updatedCounterValue);
							lead1 = leadUtility.createLeadId(updatedCounterValue);
							System.out.println("created lead id :::"+lead1);
                            lead.set_id(lead1);
							  i=i+1;
							  System.out.println("lead no:"+i);	
							  lead.setBoname("LEAD");
							  
						} 
                        else if (columnindex == 2) {
                        	lead.setOfferingname(cell.getStringCellValue().trim());  
                        }else if (columnindex == 3) {
                        	lead.setLevel20code(cell.getStringCellValue().trim());
                        }else if (columnindex == 4) {
                        	lead.setLevel30code(cell.getStringCellValue().trim());;
                        }else if (columnindex == 5) {
                        	lead.setLevel30desc(cell.getStringCellValue().trim());
                        }else if (columnindex == 6) {
                        	lead.setEstimatedvalue(cell.getStringCellValue().trim());
                        }else if (columnindex == 7) {
                        	lead.setEstimatedcurrency(cell.getStringCellValue().trim());
                        }else if (columnindex == 8) {
                        	lead.setNoticer(cell.getStringCellValue().trim());
                        	lead.setCreator(cell.getStringCellValue().trim());

                        }else if (columnindex == 9) {
                        	lead.setNoticer_country(cell.getStringCellValue().trim());
                        }else if (columnindex == 10) {
                        	lead.setLeaddescription(cell.getStringCellValue().trim());
                        	lead.setOpportunitynumber(cell.getStringCellValue().trim());
                        }else if (columnindex == 11) {
                        	lead.setCustomername(cell.getStringCellValue().trim());
                        }else if (columnindex == 12) {
                        	lead.setCustomercode(cell.getStringCellValue().trim());
                        }else if (columnindex == 13) {
                        	lead.setContractnumber(cell.getStringCellValue().trim());
                        }else if (columnindex == 14) {
                        	lead.setFocalpoint(cell.getStringCellValue().trim());
                        }else if (columnindex == 15) {
                        	lead.setStatus("32");
                        }else if (columnindex == 16) {
                        	lead.setCreated(cell.getNumericCellValue());
                        }else if (columnindex == 17) {
                        	lead.setAssignedtooodate(cell.getNumericCellValue());
                        }else if (columnindex == 18) {
                        	lead.setFirstapprovaldate(cell.getNumericCellValue());
                        	lead.setApprovaldate(cell.getNumericCellValue());;

                        }else if (columnindex == 19) {
                        	lead.setFlow("2");
                        }else if (columnindex == 20) {
                        	lead.setSelectedBrand(cell.getStringCellValue().trim());
                        }else if (columnindex == 21) {
                        	lead.setOpportunityowner(cell.getStringCellValue().trim());

                        }else if (columnindex == 22) {
                        	lead.setNoticer_department(cell.getStringCellValue().trim());

                        }else if (columnindex == 23) {
                        	lead.setNoticer_div(cell.getStringCellValue().trim());

                        }else if (columnindex == 24) {
                        	lead.setNoticer_org_id(cell.getStringCellValue().trim());

                        }else if (columnindex == 25) {
                        	lead.setNoticer_delivery_center(cell.getStringCellValue().trim());

                        }

					}
						
						
					Database db = client.database("lead", false);
					Response resp;
					try {
						
				    resp = db.save(lead);
				    
					System.out.println("resp.getId():::"+resp.getId());
					System.out.println("resp.getRev():::"+resp.getRev());

					logger.info("Import Lead callling");
					//logger.info(" Imported Lead :" + createdLead.toString());
					result = new JsonObject();
					leadResult.add(result);
					result.addProperty("status","Lead Created Successfully:" + lead.get_id());
					}
					
					catch(DocumentConflictException d) {
						result = new JsonObject();

						logger.info("Exception e:" + d);
						logger.info("Lead Already Exists!!");
						result.addProperty("status", "Lead Already Exists!!");

					}
			         }
	            	}
                 workbook.close();
	
	               }catch(Exception e) {
	            	result = new JsonObject();
	               	logger.info(e.getMessage());
            		e.printStackTrace();
		             result.addProperty("status", "Something went wrong");
	                 }
	              JsonObject finalResult = new JsonObject();
	              finalResult.add("result", leadResult);
	               return finalResult;
		
	           }

	
